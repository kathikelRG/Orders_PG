# This is a basic workflow to help you get started with Actions
 
name: deployToProduction_GitHub_Hosted
 
# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
 
env: 
  #Repository Secret - Create this within the Projects Settings > Secrects > Actions section
  # Enable this for additional debug logging
  ACTIONS_RUNNER_DEBUG: true 
  FW_LICENSE: ${{ secrets.LICENSE_KEY }}
 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains three jobs, build test and prod
  build:
    name: Deploy Build
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: 'build' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configured 
    env:
      userName: ${{ secrets.USERNAME }}
      password: ${{ secrets.PASSWORD }}

      
      # Environment Secrets - Ensure all of the below have been created as an Environment Secret (Projects Settings > Secrets > Actions section, specially related to the environment in question) #
      JDBC: ${{ vars.JDBC_URL }}
      license: ${{ secrets.FLYWAY_LICENSE_KEY }}
      EMAIL: ${{ secrets.FLYWAY_EMAIL }}
      TOKEN: ${{ secrets.FLYWAY_TOKEN }}
      
      displayName: 'Build'
      executeBuild: true
      publishArtifacts: true
 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
     
      - name: Install Flyway
        run: "wget -qO- https://download.red-gate.com/maven/release/org/flywaydb/enterprise/flyway-commandline/10.18.2/flyway-commandline-10.18.2-linux-x64.tar.gz | tar -xvz && sudo ln -s `pwd`/flyway-10.18.2/flyway /usr/local/bin"

      #- uses: kenmuse/setup-flyway@v1
      #  with: 
       #  edition: 'enterprise'
                       
      - name: Version
        run: flyway -v
     

        
      # Runs the Flyway Clean command against the Build database
      - name: Clean Build DB
        if: env.executeBuild == 'true'
        run: |
         flyway info clean info -publishResult=true -flywayServicePublish.publishReport=true -reportEnabled=true -email="${{ env.EMAIL }}" -token="${{ env.TOKEN }}" -baselineOnMigrate="true"  -locations="filesystem:${{ GITHUB.WORKSPACE }}/migrations" -environment=build -environments.build.url="${{ env.JDBC }}" -environments.build.user="${{ env.userName }}" -environments.build.password="${{ env.password }}" -cleanDisabled="false" 
        
        
        # Runs the Flyway Migrate command against the Build database
      - name: Migrate Build DB
        if: env.executeBuild == 'true'

        run: |
         flyway info migrate info -publishResult=true -email="${{ env.EMAIL }}" -token="${{ env.TOKEN }}" -environment=build -environments.build.user="${{ env.userName }}" -environments.build.password="${{ env.password }}" -baselineOnMigrate="true"   -locations="filesystem:${{ GITHUB.WORKSPACE }}/migrations"  -environments.build.url="${{ env.JDBC }}" -cleanDisabled="false"
    


       # Create a directory to stage the artifact files
      - name: Stage files for publishing
        if: env.publishArtifacts == 'true'
        run: |
         cp -R ${{ GITHUB.WORKSPACE }}/migrations ${{ GITHUB.WORKSPACE }}/Artifact_Files/

     
     #After migration scripts are validated, publish them as an artifact
      - name: Publish Validated Migration Scripts as Artifact
        if: env.publishArtifacts == 'true'
        uses: actions/upload-artifact@v4
        with: 
         name: flyway-build-artifact
         path: ${{ GITHUB.WORKSPACE }}/Artifact_Files/
 
     # This workflow contains three jobs, build test and prod"
  test:
    name: Deploy Test
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: 'test' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configured 
    needs: build
    env:
        userName: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        JDBC: ${{ vars.JDBC_URL }}
        CHECK_JDBC: ${{ vars.CHECK_JDBC }}
        CHECK_USER: ${{ secrets.CHECK_USERNAME }}
        CHECK_PASSWORD: ${{ secrets.CHECK_PASSWORD }}
        displayName: 'Test'
        executeBuild: true
        EMAIL: ${{ secrets.FLYWAY_EMAIL }}
        TOKEN: ${{ secrets.FLYWAY_TOKEN }}
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - uses: actions/checkout@v4
        - name: Install Flyway
          run: "wget -qO- https://download.red-gate.com/maven/release/org/flywaydb/enterprise/flyway-commandline/10.18.2/flyway-commandline-10.18.2-linux-x64.tar.gz | tar -xvz && sudo ln -s `pwd`/flyway-10.18.2/flyway /usr/local/bin"

        #- name: show contents
        #  run: ls ${{ GITHUB.WORKSPACE }}
        - name: Version
          run: flyway -v -licenseKey="${{ env.FW_LICENSE }}"

        #reports
        - name: Check reports
          run: |
            flyway check -changes -drift -code -publishResult=true -flywayServicePublish.publishReport=true -reportEnabled=true -email="${{ env.EMAIL }}" -token="${{ env.TOKEN }}" -email="${{ env.EMAIL }}" -token="${{ env.TOKEN }}" -environment=test -environments.test.user="${{ env.userName }}" -environments.test.password="${{ env.password }}"  -locations="filesystem:${{ GITHUB.WORKSPACE }}/migrations" -check.rulesLocation="${{ GITHUB.WORKSPACE }}/rules" -environments.test.url="${{ env.JDBC }}" -check.buildUrl="${{ env.CHECK_JDBC }}" -licenseKey="${{ env.FW_LICENSE  }}" -check.buildUser="${{ env.CHECK_USER }}" -check.buildPassword="${{ env.CHECK_PASSWORD }}" -reportFilename="teststage_report.html"

        # Runs the Flyway Migrate command against the Test database
        - name: Migrate Test DB
          run: |
            flyway info migrate info -publishResult=true -flywayServicePublish.publishReport=true -reportEnabled=true -email="${{ env.EMAIL }}" -token="${{ env.TOKEN }}" -user="${{ env.userName }}" -password="${{ env.password }}" -baselineOnMigrate="true"   -locations="filesystem:${{ GITHUB.WORKSPACE }}/migrations" -url="${{ env.JDBC }}" -licenseKey="${{ env.FW_LICENSE  }}"
    
        - name: Publish Report as Artifact
          uses: actions/upload-artifact@v4
          with: 
            name: Check Report
            path: ${{ GITHUB.WORKSPACE }}/teststage_report.html

  prod:
    name: Change Report Prod
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: 'Prod' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configured 
    needs: test
    env:
        userName: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        JDBC: ${{ vars.JDBC_URL }}
        CHECK_JDBC: ${{ vars.CHECK_JDBC }}
        CHECK_USER: ${{ secrets.CHECK_USERNAME }}
        CHECK_PASSWORD: ${{ secrets.CHECK_PASSWORD }}
        displayName: 'Prod Check Report'
        executeBuild: true
              
      # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
          - uses: actions/checkout@v4
          - name: Install Flyway
            run: "wget -qO- https://download.red-gate.com/maven/release/org/flywaydb/enterprise/flyway-commandline/10.18.2/flyway-commandline-10.18.2-linux-x64.tar.gz | tar -xvz && sudo ln -s `pwd`/flyway-10.18.2/flyway /usr/local/bin"
          
          - name: Version
            run: flyway -v -licenseKey="${{ env.FW_LICENSE }}"
          
        #reports
          - name: Check reports
            run: |
              flyway check -changes -drift -code -user="${{ env.userName }}" -password="${{ env.password }}"  -locations="filesystem:${{ GITHUB.WORKSPACE }}/migrations" -check.rulesLocation="${{ GITHUB.WORKSPACE }}/rules"    -url="${{ env.JDBC }}" -check.buildUrl="${{ env.CHECK_JDBC }}" -licenseKey="${{ env.FW_LICENSE  }}" -check.buildUser="${{ env.CHECK_USER }}" -check.buildPassword="${{ env.CHECK_PASSWORD }}" -reportFilename="prodstage_report.html"
          - name: Publish Report as Artifact
            uses: actions/upload-artifact@v4
            with: 
              name: Check Report Prod
              path: ${{ GITHUB.WORKSPACE }}/prodstage_report.html         
        
       
        
    
  prod_Deploy:
    name: Deploy Prod
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: 'Prod_Deploy' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configured 
    needs: prod
    env:
      userName: ${{ secrets.USERNAME }}
      password: ${{ secrets.PASSWORD }}
      JDBC: ${{ vars.JDBC_URL }}
      displayName: 'Deploy to Prod'
                  
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - uses: actions/checkout@v4
        - name: Install 10.18.2/
          run: "wget -qO- https://download.red-gate.com/maven/release/org/flywaydb/enterprise/flyway-commandline/10.18.2/flyway-commandline-10.18.2-linux-x64.tar.gz | tar -xvz && sudo ln -s `pwd`/flyway-10.18.2/flyway /usr/local/bin"
                      
        - name: Version
          run: flyway -v -licenseKey="${{ env.FW_LICENSE }}"


                              # Runs the Flyway Migrate command against the prod database
        - name: Migrate Prod DB
          run: |
              flyway info migrate info -user="${{ env.userName }}" -password="${{ env.password }}" -baselineOnMigrate="true"   -locations="filesystem:${{ GITHUB.WORKSPACE }}/migrations" -url="${{ env.JDBC }}" -licenseKey="${{ env.FW_LICENSE  }}"
            
